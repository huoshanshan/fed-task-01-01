// 1、请说出下列执行最终结果，并解释为什么？

var a = [];
for (var i = 0; i < 10; i++) {
    a[i] = function () {
        console.log(i);
    }
}
a[6](); 
// 输出结果10 因为此时for循环已经执行完毕了，变量i已经累加到了10，所以此时执行arr[6]()结果为10，且无论数字arr的下标是几结果都是10

//---------------------------end----------------------------------

// 2、请说出下列执行最终结果，并解释为什么？

var tmp = "123";
if (true) {
    console.log(tmp);
    let tmp;
}
// 报错 if块内有let声明的变量tmp 不能在声明前使用 有let声明的变量只在块内作用域查找变量，因此if块外用var声明的tmp不会被查找

//---------------------------end----------------------------------

// 3、结合ES6新语法，用最简单的方式找出数组中的最小值

 var arr = [12, 34, 32, 89, 4];
 const minNumber = Math.min(...arr)

 // 利用Math.min()方法找出最小值，利用ES6数组展开操符

//---------------------------end----------------------------------

// 4、请详细说明var，let，const三种声明变量的方式之间的具体差别

// var声明的变量会提升到执行体顶部，可以是全局变量，也可以是局部变量
// let和const声明的变量是块级变量，只在{}内起作用，不能在声明前使用
// const声明的变量是个常量，后期不能修改，所以声明的时候必须赋值

//---------------------------end----------------------------------

//5、请说出下列代码最终输出的结果，并解释为什么？

var a = 10;
var obj = {
    a:20,
    fn(){
        setTimeout(()=>{
            console.log(this.a);
        })
    }
}
obj.fn()

// 输出结果20 箭头函数没有this指向，它的this指向包裹它的普通函数这里即fn()，fn的this指向调用它的对象即obj所以输出结果为20

//---------------------------end----------------------------------

// 6、简述symbol类型的用途

// Symbol是全新的原始数据类型，
// (1)symbol定义的变量是一个独一无二的，不会重复，解决的命名冲突，可以为对象添加一个独一无二的属性名称
// (2)为对象添加私有成员

//---------------------------end----------------------------------

// 7、说说什么是浅拷贝，什么是深拷贝？

// 浅拷贝：拷贝的对象和被拷贝的对象指向的内存地址相同，就像你的大名叫“张三”小名叫“三儿”一样，有人叫你张三，有人叫你三儿，叫的都是你，有一天你结婚，肯定是张三和三儿都结婚了，也就是属性值改变后l拷贝的对象和被拷贝的对象都改变

// 深拷贝：拷贝的对象和被拷贝的对象都是独立的，就像是两个双胞胎一样，外表长得一样，但是两个独立的个体，谁也不影响谁

//---------------------------end----------------------------------

// 8、谈谈你是如何理解js异步编程的，Event Loop是做什么的，什么是宏任务，什么是微任务？

// js是单线程的，代码按顺序执行，这个时候如果执行过程中出现耗时较长的就会阻塞执行，为了用户有更好的体验，所以就出现了异步
//那么如何实现异步呢就是通过 Event Loop轮询处理线程
// 既然js是单线程的，那么所有的任务就需要排队执行，js中的任务可以分为宏任务和微任务，像鼠标事件，键盘事件,"ajax","setTimeout"等就属于宏任务，需要注意的是，主线程的整体代码(script标签)，也是一个宏任务
// process.nextTick，PromiseA.then()， MutaionObserver 就属于微任务
//执行宏任务队列中第一个任务，执行完后移除它
//执行所有的微任务，执行完后移除它们
//执行下一轮宏任务
//如此循环就形成了event loop，其中，每轮执行一个宏任务和所有的微任务

//---------------------------end----------------------------------

// 9、将下列异步代码使用promise改进？

setTimeout(function(){
    var a = "hello";
    setTimeout(function(){
        var b = "lagou";
        setTimeout(function(){
            var c = "I ❤ U";
            console.log(a + " " + b + " " + c);
        },10)
    },10)
},10)

new Promise(function(resolve, reject){
    resolve();
    reject();
})
.then(function(){
    var a = "hello ";
    return a;
})
.then(function(a){
    var b = a + "lagou ";
    return b;
})
.then(function(b){
    var c = "I ❤ U";
    console.log(b + c);
})
.catch(function(){
    new Error("err")
})

//---------------------------end----------------------------------

// 10、请简述Typescript和Javascript之间的关系？

// Typescript解决Javascript自有系统的问题
// Typescript是Javascript的扩展集，Typescript编译后就是可以在浏览器运行的Javascript

//---------------------------end----------------------------------

// 11、请谈谈你所认为的Typescript优缺点？

// 优点
    // 1、静态输入，可以在开发人员编写脚本时检测错误，避免在编译阶段出现编译错误
    // 2、大型的开发项目，有时为了改进开发项目，需要对代码库进行小的增量更改。这些小小的变化可能会产生严重的、意想不到的后果，因此有必要撤销这些变化。使用TypeScript工具来进行重构更变的容易、快捷
    // 3、更好的协作，当发开大型项目时，会有许多开发人员，此时乱码和错误的机也会增加。类型安全是一种在编码期间检测错误的功能，而不是在编译项目时检测错误。这为开发团队创建了一个更高效的编码和调试过程。
    // 4、更强的生产力，干净的 ECMAScript 6 代码，自动完成和动态输入等因素有助于提高开发人员的工作效率。这些功能也有助于编译器创建优化的代码。

// 缺点
    // 1、语言本身多了很多概念例如类、接口增加的学习成本
    // 2、项目初期会增加成本，在项目初期需要编写很多类型声明，对于开发周期短的小项目不建议用Typescript